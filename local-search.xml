<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python</title>
    <link href="/2023/07/11/python/"/>
    <url>/2023/07/11/python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h2><ul><li><p>常用的快捷键</p><ul><li>ctrl + alt +s:打开软件设置</li><li>ctrl+d：复制当前行代码</li><li>shift+alt+上\下：将当前的行代码上移或下移</li><li>ctrl+shift+f10：运行当前代码文件</li><li>shift+f6:重命名文件</li><li>ctrl+f：搜索</li></ul></li><li><p>print 语句中加end&#x3D;’’可以不换行</p><ul><li><pre><code class="hljs">print(&quot;hellow&quot;,end=&#39;&#39;)<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span> print时加&quot;&quot;&quot;   &quot;&quot;&quot;可以简洁多个换行<br><br><span class="hljs-bullet">+</span> \t 效果等于 tab键<br><br><span class="hljs-bullet">+</span> ctrl+/快速注释<br><br><span class="hljs-bullet">+</span> 注释<br><br><span class="hljs-bullet">  +</span> 单行注释<br><span class="hljs-bullet">    +</span> 以#开头(一般#号和注释内容一般建议以一个空格隔开)<br><br><span class="hljs-bullet">  +</span> 多行注释<br><span class="hljs-bullet">    +</span> 以一对三个双引号引起来来接受说明一段代码的作用和使用方法<br><br><br><span class="hljs-bullet">+</span> 数据类型<br><br><span class="hljs-bullet">  +</span> type（）语句可以输出类型信息<br><br><span class="hljs-bullet">+</span> 数据类型转换<br><br><span class="hljs-bullet">  +</span> str（）转换为字符串<br><span class="hljs-bullet">  +</span> int（）转换为整数<br><span class="hljs-bullet">  +</span> float（）转换为数字     <br><br><span class="hljs-bullet">+</span> 标识符命名规则<br><br><span class="hljs-bullet">  +</span> 只能出现<br><span class="hljs-bullet">    +</span> 英文<br><span class="hljs-bullet">    +</span> 中文<br><span class="hljs-bullet">    +</span> 数字<br><span class="hljs-bullet">    +</span> 下划线<br><span class="hljs-bullet">  +</span> 大小写敏感<br><span class="hljs-bullet">  +</span> 不可使用关键词   <br><br><span class="hljs-bullet">+</span> 算术运算符<br><br><span class="hljs-bullet">  +</span> +<br><span class="hljs-bullet">  +</span> -<br><span class="hljs-bullet">  +</span> *<br><span class="hljs-bullet">  +</span> /<br><span class="hljs-bullet">  +</span> //（取整除）<br><span class="hljs-bullet">  +</span> %(取余)<br><span class="hljs-bullet">  +</span> <span class="hljs-strong">**（指数 ）</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">+ 使用转义字符\接触引号的效用</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">  + 例如&quot; \&quot;111 &quot;输出&quot;111（格式为name=“\“111”）</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">+ 字符串格式化 </span><br><span class="hljs-strong"></span><br><span class="hljs-strong">  + 字符串拼接%s占位拼接</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">    + ```python</span><br><span class="hljs-strong">      name = &quot;董佬&quot;</span><br><span class="hljs-strong">      message =&quot;卷王 %s&quot; % name</span><br><span class="hljs-strong">      print (message) </span><br></code></pre></td></tr></table></figure>+ %s 将内容转换为字符串，放入占位位置+ %d 将内容转换成1整数，放入占位位置+ %f将内容转换成浮点型，放入占位位置</code></pre></li><li><p>数字精度控制(和java差不多)</p><ul><li>例如%5.2f：表示将宽度控制为5，将小数点精度设置为2</li><li>%.2f小数点精度设置为2</li></ul></li><li><p>快速拼接f” {占位内容}”</p></li></ul></li><li><p>数据输入</p><ul><li>input()获取用户输入</li><li>获取的数据永远都是字符串类型的</li></ul></li></ul><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><ul><li>if （和java略微不同，python里是：结尾例如 if age &gt;18: 满足条件应该做的事）</li><li>if else（和java相同）</li><li>if  条件1：elif 条件2： …… else ：</li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>while</p><ul><li>while 条件: (其他跟java一样)</li><li>while循环的循环条件是自定义的，自行控制循环条件</li><li>for循环是一种“轮询”机制，1是对一批内容进行逐个处理</li></ul></li><li><p>for</p><ul><li><p>for 临时变量 in 待处理的数据集：循环满足时执行的代码</p></li><li><p>也称遍历循环</p></li><li><p>临时变量，在编程规范上，作用范围，只限定在for内部</p><ul><li>实际上可以访问到</li><li>但是编程规范上不允许，不建议这么使用</li></ul></li></ul></li><li><p>range语句</p><ul><li>range（num）表示获取一个从0开始，到num结束的数字序列不包含num</li><li>range（num1，num2）从num1到num2不包含num2<ul><li>例如range（5,10）   [5,6,7,8,9]</li></ul></li><li>range（num1，num2，step）<ul><li>例如range（5,10,2）  [5,7,9]</li></ul></li></ul></li><li><p>continue</p><ul><li>类似java中的</li><li>break<ul><li>类似java中的</li></ul></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>函数是：组织好的、可重复使用的、用来实现特定功能的代码段</p><ul><li><p>函数的定义</p><ul><li><pre><code class="python">def 函数名(传入参数)：    函数体    return 返回值调用函数<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ 函数的传入参数<br><br>  + ```python<br>    def 函数名(x,y)：<br>    函数体<br>    <span class="hljs-keyword">return</span> 返回值<br>    调用函数(a,b)<br></code></pre></td></tr></table></figure></code></pre></li><li><p>x,y为形式参数，a，b为实际参数</p></li></ul></li><li><p>函数的返回值</p><ul><li><pre><code class="python">def 函数名(x,y)：    函数体    return 返回值调用函数(a,b)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>  + 可以直接用一个变量接受返回值<br><br>+ <span class="hljs-literal">None</span>字面量<br><br>  + <span class="hljs-literal">None</span>是类型‘NoneType’的字面量，用于表示空的、无意义的<br>  + 不使用<span class="hljs-keyword">return</span>返回none<br><br>+ 函数说明文档<br><br>  + ```python<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span> (x,y):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">        :param x: 参数x说明</span><br><span class="hljs-string">        :param y:参数y的说明</span><br><span class="hljs-string">        :return:返回值的说明</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> x+y<br>    <br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>局部变量：只能在函数体内生效的变量</p></li><li><p>全局变量：在函数体内和外部都能生效的变量</p></li><li><p>global：可以将局部变量设置为全局变量</p></li></ul></li><li><p>函数的参数种类</p><ul><li><p>位置参数</p><ul><li>就是按位置</li></ul></li><li><p>关键字参数</p><ul><li>调用函数的时候通过“键&#x3D;值”形式传递参数</li></ul></li><li><p>缺省参数</p><ul><li>也叫默认参数，竞赛为参数提供默认值</li></ul></li><li><p>不定长参数</p><ul><li><p>也叫可变参数，可以传多个参数</p></li><li><p>分为</p><ul><li><p>位置传递</p><ul><li><p>单个*，形式参数做为元组存在，接受不定长度的参数传入</p></li><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">*args</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>关键字传递</p><ul><li><p>两个**，形式参数做完字典存在,以字典形式接收</p></li><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">**kwargs</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li><li><p>匿名函数</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 传入参数:函数体(一行代码)<br></code></pre></td></tr></table></figure></li><li><p>只能使用一次</p></li></ul></li></ul><h3 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h3><ul><li><p>数据容器：List</p><ul><li><pre><code class="python"># 字面量[元素1，元素2，元素3，元素4，...]# 定义变量变量名称=[元素1，元素2，...]# 定义空列表变量名称=[]变量名称=list()<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>+ 列表下标索引类似java中的数组<br><br>  + 从前向后的方向，编号从<span class="hljs-number">0</span>开始递增<br><br>  + 从后向前的方向，编号从<span class="hljs-number">-1</span>开始递减<br><br>  + 嵌套列表中的数据例如<br><br>    + ```python<br>      my_list=<span class="hljs-string">[[1,2,3],[2,3,666]]</span><br>      <span class="hljs-built_in">print</span>(my_list[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure></code></pre></li><li><p>查找某元素的下标</p><ul><li>语法：列表.index(元素)</li></ul></li><li><p>修改特定下标索引的值</p><ul><li>只需取到对应下标然后&#x3D;所需要改变成的值进行</li></ul></li><li><p>在指定位置插入新元素</p><ul><li>语法：列表.insert(下标，元素 )</li></ul></li><li><p>将指定元素，追加到列表的尾部</p><ul><li>语法：列表.append(元素)</li><li>语法2：列表.extend(其他数据容器)，将其他数据容器内容取出，依次追加到列表尾部</li></ul></li><li><p>删除元素</p><ul><li>语法1：del列表（下标）</li><li>语法2：列表.pop(下标)</li></ul></li><li><p>删除某元素在列表中的第一个匹配项</p><ul><li>语法：列表.remove(元素)</li></ul></li><li><p>清空列表内容</p><ul><li>语法：列表.clear()</li></ul></li><li><p>统计某元素在列表内的数量</p><ul><li>语法：列表.count(元素)</li></ul></li><li><p>统计列表元素数量</p><ul><li>len(列表)</li></ul></li></ul></li><li><p>元组：tuple(不可修改)</p><ul><li><pre><code class="python"># 元组字面量(元素1，元素2，元素3，元素4，...)# 定义元组变量变量名称=(元素1，元素2，...)# 定义空元组变量名称=()# 方式1变量名称=tuple() #方式2<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ 定义单独元素需要在后面加一个逗号<br><br>  + ```python<br>    t1=(<span class="hljs-string">&quot;hello&quot;</span>,)<br></code></pre></td></tr></table></figure></code></pre></li><li><p>相关操作</p><ul><li>index()<ul><li>查找某个数据的下标，如果没有则报错</li></ul></li><li>count()<ul><li>统计某个数据出现在当前元组的次数</li></ul></li><li>len(元组)<ul><li>统计元素个数</li></ul></li></ul></li><li><p>可以修改元组中list中的内容</p></li></ul></li><li><p>字符串（str）</p><ul><li>字符串不支持修改</li><li>相关操作<ul><li>index()方法<ul><li>语法：字符串.index(a)</li><li>和list中的用法相似</li></ul></li><li>replace方法<ul><li>语法：字符串.replace(a,b)</li><li>功能：replace(a,b)生成一个新的字符串将字符串中的b替换成a</li></ul></li><li>spilt方法<ul><li>语法:字符串.spilt(分割字符串)</li><li>功能：按照指定的分割字符串，将字符串划分为多个字符串，并存入列表对象中</li></ul></li><li>strip方法<ul><li>语法1：字符串.strip()  (去除前后空格)</li><li>语法2：字符串.strip(字符串)（去除前后指定字符串）<ul><li>传入的如果是”12”就是”1”和”2”都会移除，是按照单个字符</li></ul></li></ul></li><li>count方法<ul><li>用法和list中相似</li></ul></li><li>len方法<ul><li>同上</li></ul></li></ul></li></ul></li><li><p>切片：从一个序列中取出一个子序列</p><ul><li>语法：序列[起始下标：结束下标：步长]</li><li>起始下标可以留空，表示从头开始</li><li>结束下标（不包含），可以留空，表示截取到结尾</li><li>[::-1]等同于将序列反转</li></ul></li><li><p>set集合</p><ul><li><pre><code class="python"># 定义集合字面量&#123;元素，元素，元素，元素，...&#125;# 定义集合变量变量名称=&#123;元素，元素，...&#125;# 定义空集合变量名称=set()<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 集合是无序的，不支持下标索引访问，会去重<br><br><span class="hljs-bullet">  +</span> 相关操作<br><br><span class="hljs-bullet">    +</span> 添加元素<br><span class="hljs-bullet">      +</span> 语法：集合.add（元素）<br><span class="hljs-bullet">    +</span> 移除元素<br><span class="hljs-bullet">      +</span> 语法：集合.remove(元素)<br><span class="hljs-bullet">    +</span> 随机取出一个元素<br><span class="hljs-bullet">      +</span> 语法：集合.pop() <br><span class="hljs-bullet">      +</span> 结果：会得到一个元素的结果。同时集合本身被修改，元素被移除<br><span class="hljs-bullet">    +</span> 清空集合<br><span class="hljs-bullet">      +</span> 语法：集合.clear()<br><span class="hljs-bullet">    +</span> 取出两个集合的差集<br><span class="hljs-bullet">      +</span> 语法：集合1.difference(集合2)<br><span class="hljs-bullet">      +</span> 结果：得到一个新集合，集合1和2不变<br><span class="hljs-bullet">    +</span> 消除2个集合的差集<br><span class="hljs-bullet">      +</span> 语法：集合1.difference<span class="hljs-emphasis">_update(集合2)</span><br><span class="hljs-emphasis">      + 功能：对比集合1和集合2，在集合1中删除和集合2相同的元素</span><br><span class="hljs-emphasis">      + 结果：集合1被修改，集合2不变</span><br><span class="hljs-emphasis">    + 合并两个集合</span><br><span class="hljs-emphasis">      + 语法：集合1.union(集合2)</span><br><span class="hljs-emphasis">    + 统计元素个数</span><br><span class="hljs-emphasis">      + 语法“len（集合）</span><br><span class="hljs-emphasis">    + 遍历集合</span><br><span class="hljs-emphasis">      + 不支持while循环，支持for循环</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">+ dict字典</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + ```python</span><br><span class="hljs-emphasis">    # 定义字典字面量</span><br><span class="hljs-emphasis">    &#123;key:value,key:value...&#125;</span><br><span class="hljs-emphasis">    </span><br><span class="hljs-emphasis">    # 定义字典变量</span><br><span class="hljs-emphasis">    变量名称=&#123;key:value，key:value，...&#125;</span><br><span class="hljs-emphasis">    </span><br><span class="hljs-emphasis">    # 定义空字典</span><br><span class="hljs-emphasis">    变量名称=dict()</span><br><span class="hljs-emphasis">    字典名称=&#123;&#125;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>相关操作</p><ul><li><p>更新元素</p><ul><li>语法：字典[key]&#x3D;Value</li></ul></li><li><p>删除元素</p><ul><li>语法：字典.pop(key)</li><li>结果：获取指定key的值，同时指定key的数据被修改</li></ul></li><li><p>清空字典</p><ul><li>语法：字典.clear()</li></ul></li><li><p>获取全部的key</p><ul><li>语法：字典.keys()</li></ul></li><li><p>遍历字典</p><ul><li><pre><code class="python">my_dict=&#123;&quot;dzr&quot;:100,&quot;gsh&quot;:100,&quot;zcr&quot;:100,&quot;wsy&quot;:100,&quot;lxm&quot;:100&#125;keys=my_dict.keys()for key in keys:    print(f&quot;字典的key是：&#123;key&#125;&quot;)    print(f&quot;value&#123;keys&#125;&quot;)<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>    + 统计元素个数<br><br>      + <span class="hljs-built_in">len</span>(字典)<br><br>  + key不可重复（重复会覆盖）<br><br>+ 数据容器的通用操作<br><br>  + <span class="hljs-built_in">max</span>()<br>    + 找出最大的元素<br>  + <span class="hljs-built_in">min</span>()<br>    + 找出最小的元素<br>  + <span class="hljs-built_in">len</span>()<br>    + 统计容器元素个数<br>  + <span class="hljs-built_in">sorted</span>(容器<span class="hljs-selector-attr">[reverse=True]</span>)（默认是FALSE是正向排序）<br>    + 给容器进行排序（排序完之后变成列表对象）<br>    <br>    + 基于lambda函数进行排序<br>    <br>      + 例如<br>    <br>        ```python<br>        my_list=<span class="hljs-selector-attr">[[<span class="hljs-string">&quot;a&quot;</span>,11]</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&quot;c&quot;</span>,22]</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&quot;b&quot;</span>,12]</span>]<br>        my_list<span class="hljs-selector-class">.sort</span>(key=lambda element:element<span class="hljs-selector-attr">[1]</span>,reverse=True)<br>        <span class="hljs-built_in">print</span>(my_list)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li><p>文件编码（目前主流一般默认UTF-8）</p></li><li><p>文件操作</p><ul><li><p>open（）打开函数</p><ul><li><p>语法：open（name,mode,encoding）</p></li><li><p>name:是要打开的目标文件名的字符串(可以包含文件所在的具体路径)</p></li><li><p>mode:设置打开文件的模式：只读（r）、写入(w)、追加(a)</p><ul><li>r:以只读方式打开文件，这是默认模式</li><li>w:打开一个文件只用于写入，如果该文件已存在则打开文件，并从开头开始编辑，原有内容会被删除。如果该文件不存在，创建新文件</li><li>a：打开一个文件用于追加。如果文件已经存在，新内容将会被写入到已有内容之后，如果该文件不存在，创建新文件</li></ul></li><li><p>encoding:编码格式</p></li></ul></li><li><p>read()方法读取</p><ul><li>语法：文件对象.read(num)<ul><li>num表示从文件中读取的数据长度（单位是字节），如果没传入则表示读取文件中的所有数据</li><li>注：如果连续使用read()读取同一个文件，下一个read会从上一个read的结尾处开始读取</li></ul></li></ul></li><li><p>readlines（）方法读取</p><ul><li>读取全部内容，返回一个list列表，每一行数据为一个元素</li></ul></li><li><p>readline（）方法读取</p><ul><li>读取一行数据</li></ul></li><li><p>for循环读取数据</p><ul><li><pre><code class="python">for line in open(&quot;D:/python爬虫/11.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;):    print(line)<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>+ <span class="hljs-built_in">close</span>()方法关闭文件对象<br><br>  + 语法:文件对象.<span class="hljs-built_in">close</span>()<br>  + 作用：解除对文件的占有<br><br>+ <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>()<br><br>  + 作用：可以自动将文件关闭<br><br>  + ```python<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:/python爬虫/11.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> f:<br>            print(<span class="hljs-built_in">line</span>)<br>    <br>    <br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>write（文件写入）</p><ul><li>语法：文件对象.write()</li><li>直接调用write，是将内容写入缓冲区中，直到调用flush或者close的时候才会写入硬盘中</li></ul></li><li><p>flush()内容刷新</p><ul><li>语法:文件对象.flush()</li><li>注：close方法自带flush方法</li></ul></li></ul></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li><p>异常的捕获的方法</p><ul><li><p>捕获常规异常</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>：<br>可能发送错误的代码<br><span class="hljs-keyword">except</span>：<br>如果出现异常执行的代码<br></code></pre></td></tr></table></figure></li></ul></li><li><p>捕获指定异常</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">except</span> NameError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现变量未定义&quot;</span>)<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>捕获多个异常</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">except</span> (NameError,ZeroDivisionError) <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现变量未定义&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>捕获所有异常(使用exception较为多)</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现异常&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>else</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现异常&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无异常时执行代码&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>finally</p><ul><li><p>表示无论是否异常都要执行的操作</p></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现异常&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无异常时执行代码&quot;</span>)<br><span class="hljs-keyword">finally</span>:<br>f.close()<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>异常是具有传递性的</p></li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li><p>模块的导入方式</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-keyword">from</span> 模块名] <span class="hljs-keyword">import</span> [模块|类|变量|函数|*][<span class="hljs-keyword">as</span> 别名]([]表示可选)<br></code></pre></td></tr></table></figure></li><li><p>导入模块部分功能</p><ul><li><pre><code class="python">from 模块名 import 功能名功能名()<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elm"><br>+ 导入全部模块<br><br>  + 语法：<br><br>    ```python<br>    from 模块名 <span class="hljs-keyword">import</span> *  (使用时可以直接使用方法，不用带模块名)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>自定义模块</p><ul><li><p>当导入多个模块，且模块内有同名的功能是，调用的是后面导入模块的功能</p></li><li><p>测试模块</p><ul><li><p>如果编写完模块后想测试一下模块，可以使用main来完成测试</p></li><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><pre><code class="python">__all__:如果一个模块文件有这个变量，那么当使用from xxx import *  导入时，只能导入这个列表中的元素<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 包<br><br>+ 导入包<br><br>  + 方式(跟模块类似)<br><br>    + ```python<br>      <span class="hljs-keyword">import</span> 包名.模块名<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>创建包时，必须要有一个（_init__）的文件</p></li></ul><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul><li><p>json：是一个带特定格式的字符串</p><ul><li>作用：用于当做不同语言的中转站</li></ul></li><li><p>python数据和json数据的相互转化</p><ul><li><p>导入json模块</p></li><li><p>json.dumps()可将python数据转化为json数据</p></li><li><p>json.loads()可将json数据转化为python数据</p></li><li><p>在两个方法中加入ensure_ascii&#x3D;False 可将中文显示出来</p><ul><li><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">json.dumps(d,ensure_ascii=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>通过json模块对数据进行处理</p></li></ul><h3 id="pyechars模块"><a href="#pyechars模块" class="headerlink" title="pyechars模块"></a>pyechars模块</h3><ul><li><p>折线图</p><ul><li><pre><code class="python">from pyecharts.charts import Line#获取折线图对象line=Line()#添加x轴数据line.add_xaxis([&quot;gsh&quot;,&quot;dzr&quot;,&quot;wsy&quot;])#添加y轴数据line.add_yaxis(&quot;绩点&quot;,[100,99,99])#生成图表line.render()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>+ 地图<br><br>  + ```python<br>    <span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Map<br>    <span class="hljs-keyword">from</span> pyecharts.options <span class="hljs-keyword">import</span> VisualMapOpts<br>    <span class="hljs-comment">#准备地图对象</span><br>    <span class="hljs-built_in">map</span>=Map()<br>    <span class="hljs-comment">#准备数据</span><br>    date=[<br>        (<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-number">10000</span>),<br>        (<span class="hljs-string">&quot;上海市&quot;</span>,<span class="hljs-number">1200</span>),<br>        (<span class="hljs-string">&quot;广东省&quot;</span>,<span class="hljs-number">4999</span>)<br>    ]<br>    <span class="hljs-comment">#添加数据</span><br>    <span class="hljs-built_in">map</span>.add(<span class="hljs-string">&quot;地图&quot;</span>,date,<span class="hljs-string">&quot;china&quot;</span>)<br>    <br>    <span class="hljs-comment">#设计全局选项</span><br>    <span class="hljs-built_in">map</span>.set_global_opts(<br>        visualmap_opts=VisualMapOpts(<br>            is_show=<span class="hljs-literal">True</span>,<br>            is_piecewise=<span class="hljs-literal">True</span>,<br>            pieces=[<br>                &#123;<span class="hljs-string">&quot;min&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;max&quot;</span>:<span class="hljs-number">9</span>,<span class="hljs-string">&quot;lable&quot;</span>:<span class="hljs-string">&quot;1-9&quot;</span>,<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;#CCFFFFF&quot;</span>&#125;<br>            ]<br>        )<br>    <br>    )<br>    <span class="hljs-comment">#绘图</span><br>    <span class="hljs-built_in">map</span>.render()<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>柱状图</p><ul><li><pre><code class="python">from pyecharts.charts import Barfrom pyecharts.options import *#构建柱状图对象bar=Bar()#添加x轴bar.add_xaxis([&quot;gsh&quot;,&quot;dzr&quot;,&quot;wsy&quot;,&quot;zcr&quot;,&quot;lxm&quot;])#添加y轴bar.add_yaxis(&quot;成绩&quot;,[100,100,95,96,95],label_opts=LabelOpts(position=&quot;right&quot;))#反转x轴y轴bar.reversal_axis()#绘图bar.render()<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>+ 创建时间线<br><br>  + ```python<br>    <br>    <span class="hljs-keyword">from</span> pyecharts.charts import Bar,Timeline<br>    <span class="hljs-keyword">from</span> pyecharts.options import *<br>    #构建柱状图对象<br>    <span class="hljs-attribute">bar</span>=Bar()<br>    #添加x轴<br>    bar.add_xaxis([<span class="hljs-string">&quot;gsh&quot;</span>,<span class="hljs-string">&quot;dzr&quot;</span>,<span class="hljs-string">&quot;wsy&quot;</span>,<span class="hljs-string">&quot;zcr&quot;</span>,<span class="hljs-string">&quot;lxm&quot;</span>])<br>    #添加y轴<br>    bar.add_yaxis(<span class="hljs-string">&quot;成绩&quot;</span>,[10,10,30,20,10],<span class="hljs-attribute">label_opts</span>=LabelOpts(position=&quot;right&quot;))<br>    #反转x轴y轴<br>    bar.reversal_axis()<br>    <br>    <span class="hljs-attribute">bar1</span>=Bar()<br>    bar1.add_xaxis([<span class="hljs-string">&quot;gsh&quot;</span>,<span class="hljs-string">&quot;dzr&quot;</span>,<span class="hljs-string">&quot;wsy&quot;</span>,<span class="hljs-string">&quot;zcr&quot;</span>,<span class="hljs-string">&quot;lxm&quot;</span>])<br>    bar1.add_yaxis(<span class="hljs-string">&quot;成绩&quot;</span>,[100,100,100,100,100],<span class="hljs-attribute">label_opts</span>=LabelOpts(position=&quot;right&quot;))<br>    bar1.reversal_axis()<br>    #创建时间线对象<br>    <span class="hljs-attribute">timeLine</span>=Timeline()<br>    #添加bar柱状图<br>    timeLine.<span class="hljs-built_in">add</span>(bar,<span class="hljs-string">&quot;2022成绩&quot;</span>)<br>    timeLine.<span class="hljs-built_in">add</span>(bar1,<span class="hljs-string">&quot;2023成绩&quot;</span>)<br>    #绘图<br>    timeLine.render(<span class="hljs-string">&quot;时间线.html&quot;</span>)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li><p>类的使用方式和java中使用类似</p></li><li><p>类中成员方法</p><ul><li><p>成员方法的定义语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">方法名</span>(<span class="hljs-params">self,形参<span class="hljs-number">1</span></span>):<br>方法体<br></code></pre></td></tr></table></figure></li><li><p>在方法内部想要访问类的成员变量，必须使用self</p></li></ul></li><li><p>构造方法</p><ul><li><pre><code class="python">在python类中可以使用：__init__方法<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 可以实现：<br><br><span class="hljs-bullet">    +</span> 在创建类对象时候，自动执行<br><span class="hljs-bullet">    +</span> 或将传入参数自动传递给init方法使用<br><br><span class="hljs-bullet">+</span> 魔术方法<br><br><span class="hljs-bullet">  +</span> <span class="hljs-emphasis">_str_</span>字符串方法<br><br><span class="hljs-bullet">    +</span> 作用：控制类转换为字符串<br><br><span class="hljs-bullet">  +</span> <span class="hljs-emphasis">_lt_</span>方法<br><br><span class="hljs-bullet">    +</span>  作用：可以直接对两个对象进行：大于和小于两个符号的两种比较<br><br><span class="hljs-bullet">    +</span> <span class="hljs-code">```python</span><br><span class="hljs-code">          def __lt__(self, other):</span><br><span class="hljs-code">              return self.name&lt;other.name</span><br><span class="hljs-code">          </span><br><span class="hljs-code">          返回值为True或False</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>le方法</p><ul><li>作用：可用于&gt;&#x3D;和&lt;&#x3D;两种比较运算符上</li><li>语法和lt类似</li></ul></li><li><p>eq方法</p><ul><li>作用：是&#x3D;</li></ul></li></ul></li><li><p>私有成员</p><ul><li>私有成员只能在该类中使用</li><li>私有成员变量：变量名以双下划线开头</li><li>私有成员方法：方法名以双下划线开头</li></ul></li><li><p>继承</p><ul><li><p>继承</p><ul><li>作用：可以调用父类那边的成员变量和成员方法<ul><li>语法</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>(<span class="hljs-title class_ inherited__">父类名</span>):<br>类内容体<br></code></pre></td></tr></table></figure></li><li><p>多继承</p><ul><li>语法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>(父类名<span class="hljs-number">1</span>，父类<span class="hljs-number">2</span>，....):<br>类内容体（如果不用添加新内容就写<span class="hljs-keyword">pass</span>）<br></code></pre></td></tr></table></figure><ul><li>注：如果多继承，优先级从左往右继承父类</li></ul></li><li><p>复写</p><ul><li>在子类中重新定义同名的属性或者方法</li><li>如果在复写之后想要调用被复写的父类成员可以有两种方式<ul><li>一:父类名.成员变量（父类名.成员方法(self）</li><li>二:super().成员变量(super().成员方法())</li></ul></li></ul></li></ul></li><li><p>类型注解</p><ul><li><p>语法：变量：类型</p></li><li><p>另一种：</p><ul><li>语法：#type：类型</li></ul></li><li><p>作用：</p><ul><li>开发者自身做的备注</li><li>帮助pycharm等开发工具对代码类型推断协助做代码提示</li></ul></li><li><p>函数方法的类型注解</p><ul><li><pre><code class="python">def 函数方法名(形参:类型，......，形参:类型) -&gt;返回值类型:    pass<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>  + Union<br><br>    + 语法：变量：类型Union[类型1，类型2,<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.]<br>    + 作用：可以表示类型可能为多种<br><br>+ 多态<br><br>  + 多态：多种状态，既完成某个行为时，使用不同对象会得到不同状态<br><br>+ ## 抽象类(接口)<br><br>  + 抽象方法：方法体是空实现的(pass)称之为抽象方法<br>  + 作用：多用于做顶层设计(设计标准)，以便子类做具体实现<br><br><span class="hljs-comment">## python联合mysql的使用</span><br><br>+ 链接数据库<br><br>  + <br><br>  ```python<br>  <span class="hljs-keyword">from</span>  pymysql import<span class="hljs-built_in"> Connection</span><br><span class="hljs-built_in"></span>  #获取到MYSQL数据库的链接对象<br>  <span class="hljs-attribute">conn</span>=Connection(<br>      <span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;localhost&#x27;</span>,#主机名<br>      <span class="hljs-attribute">port</span>=3306,#端口<br>      <span class="hljs-attribute">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>,<br>      <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;root&#x27;</span><br>  )<br>  conn.close()<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>执行sql语句</p><ul><li><pre><code class="python">from  pymysql import Connectionconn=Connection(    host=&#39;localhost&#39;,    port=3306,    user=&#39;root&#39;,    password=&#39;root&#39;)#获取游标对象cursor=conn.cursor()conn.select_db(&quot;test&quot;)#使用游标对象，执行sql语句cursor.execute(&quot;create table test_pymysql(id INT,info varchar(255))&quot;)#获取结果查询results:tuple =cursor.fetchall()for r in results:    print(r)#关闭数据库链接conn.close()<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>+ 数据插入<br><br>  + ```python<br>    <span class="hljs-keyword">from</span>  pymysql <span class="hljs-keyword">import</span> <span class="hljs-keyword">Connection</span><br>    conn=<span class="hljs-keyword">Connection</span>(<br>        host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        port=<span class="hljs-number">3306</span>,<br>        <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;root&#x27;</span><br>        autocommit=<span class="hljs-keyword">True</span> #设置自动提交<br>    )<br>    <br>    #获取游标对象<br>    <span class="hljs-keyword">cursor</span>=conn.<span class="hljs-keyword">cursor</span>()<br>    conn.select_db(&quot;test&quot;)<br>    #使用游标对象，执行<span class="hljs-keyword">sql</span>语句<br>    <span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">execute</span>(&quot;insert into student values(10001,&#x27;周杰伦&#x27;,31,&#x27;男&#x27;)&quot;)<br>    #通过<span class="hljs-keyword">commit</span>确认<br>    #conn.<span class="hljs-keyword">commit</span>()<br>    #关闭数据库链接<br>    conn.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>爬虫：通过编写程序，模拟浏览器上网，然后去互联网上抓取数据的过程</p><ul><li>写一个爬虫的步骤<ul><li>第一步：获取网页内容</li><li>第二步：解析网页内容</li><li>第三步：储存或分析数据</li></ul></li></ul><h1 id="PySpark"><a href="#PySpark" class="headerlink" title="PySpark"></a>PySpark</h1><p>+ </p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>servlet</title>
    <link href="/2023/06/19/servlet/"/>
    <url>/2023/06/19/servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><p>1.系统架构包括</p><p>​</p><ul><li>C&#x2F;S架构<ul><li>B&#x2F;s架构.</li></ul></li></ul><p>2.C&#x2F;S架构</p><ul><li><p>Client&#x2F;Server(客户端&#x2F;服务器)</p></li><li><p>C&#x2F;S架构的特点：安装特点的客户端软件</p></li><li><p>C&#x2F;D架构的系统优点</p><ul><li>优点<ul><li>速度快</li><li>体验好</li><li>界面好看</li><li>服务器压力小</li><li>安全</li></ul></li><li>​缺点<ul><li>升级维护较为困难</li></ul></li></ul><p> </p><p> 3.B&#x2F;S结构</p></li></ul><ul><li>B&#x2F;S结构是特殊的C&#x2F;S结构只不过这个c比较特殊，是一个固定不变的浏览器软件<ul><li>B&#x2F;S的优点<ul><li>升级维护方便，成本低</li><li>不需要安装特点客户端软件，用户操作方便，只需打开网站</li></ul></li><li>缺点<ul><li>速度慢</li><li>体验差</li><li>不安全</li></ul></li></ul></li></ul><p>​4.开发B&#x2F;S就是开发WEB</p><ul><li>开发web需要技术<ul><li>WEB前端<ul><li>HTML</li><li>CSS</li><li>JAVAScript</li></ul></li><li>web后端<ul><li>java</li><li>c</li><li>c++</li><li>python</li><li>php</li></ul></li></ul></li></ul><p>​5.javaEE是什么</p><ul><li>java三大块<ul><li>javaSE<ul><li>java标准版</li></ul></li><li>javaEE<ul><li>java企业版</li></ul></li><li>javaME<ul><li>java微型版</li></ul></li></ul></li></ul><h2 id="B-x2F-S结构的通讯原理"><a href="#B-x2F-S结构的通讯原理" class="headerlink" title="B&#x2F;S结构的通讯原理"></a>B&#x2F;S结构的通讯原理</h2><ul><li>IP地址<ul><li>计算机在网络当中的一个身份证号，在同一个网络当中，IP地址是唯一的</li><li>有IP地址才能建立链接</li></ul></li><li>端口号<ul><li>一个端口代表一个软件，每个软件启动之后都有一个端口号</li><li>在同一计算机上端口号具有唯一性</li></ul></li><li>URL<ul><li>统一资源定位符</li></ul></li><li>请求和响应<ul><li>请求和响应实际上是数据流向的不同</li><li>从Browser端发送数据到Server端，为请求（request）</li><li>反过来就是响应（response）</li><li>B-&gt;S（请求request）</li><li>S-&gt;B(响应response)</li></ul></li><li>应用服务器和web服务器的关系<ul><li>应用服务器实现了javaEE的所有规范。（javaEE有13个不同的规范）</li><li>WEB服务器只实现了javaEE中的Servlet+JSP两个核心规范</li><li>应用服务器是包含WEB服务器的</li></ul></li><li>Tomcat服务器的目录<ul><li>bin：这个目录是Tomcat服务器1的命令文件存放的目录，比如：启动Tomact</li><li>conf：这个目录是Tomcat服务器配置文件存放目录</li><li>lib：这个目录是Tomcat服务器的核心程序目录</li><li>log：Tomcat服务器日志目录</li><li>temp:Tomcat服务器的临时目录，存储临时文件</li><li>webapps：这个目录用来大量存放webapp</li><li>wrok：存放jsp文件翻译之后的java文件以及编译之后的class文件</li></ul></li><li>Servlet规范是什么规范<ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中</li><li>Servlet规范<ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>一个web应用中应该有哪些配置文件</li><li>web应用中配置文件的名字</li><li>web应用中配置文件存放的路径</li><li>web应用中配置文件的内容</li><li>一个合法有效的web应用的目录结构</li></ul></li></ul></li></ul><h2 id="开发一个带有Servlet的WEBapp"><a href="#开发一个带有Servlet的WEBapp" class="headerlink" title="开发一个带有Servlet的WEBapp"></a>开发一个带有Servlet的WEBapp</h2><ul><li><p>开发步骤</p><ul><li><p>第一步：在webapps目录下新建一个目录，起名crm</p><ul><li>注：crm是webapp的根</li></ul></li><li><p>第二步：在webapp的根下新建一个目录，WEB-INF</p><ul><li>注：该目录的名字是Servlet规范中规定的，必须全部大写，一模一样</li></ul></li><li><p>第三步：在WEB-INF目录下新建一个目录：classes</p><ul><li>注：这个目录名字需为classes小写，要符合Servlet规范。这个目录下存放的是java程序编译之后的class文件（这里存放的是字节码文件）</li></ul></li><li><p>第四步：在EB-INF目录新建一个目录：lib</p><ul><li>注：这个目录不是必要的，但如果一个webapp需要第三方jar包，那么jar包放在该目录下，且这个目录名字也要符合Servlet规范为全小写lib。</li></ul></li><li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p><ul><li><p>注：该文件是必须的，该文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类直接的对照关系。</p></li><li><p>这个文件最好从其他地方拷贝</p></li><li><pre><code class="java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;https://jakarta.ee/xml/ns/jakartaee&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/jakartaee                      https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;  version=&quot;6.0&quot;  metadata-complete=&quot;true&quot;&gt;&lt;/web-app&gt;<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>  + 第六步：编写一个java程序，该java程序需要实现Servlet接口。<br><br>  + 第七步：编译写的java程序<br><br>    + 注：配置环境变量CLASSPATH<br><br>  + 第八步：将以上的编译之后的.<span class="hljs-keyword">class</span>文件拷到WEB-<span class="hljs-keyword">INF</span>\classes目录下<br><br>  + 第九步：在web.xml文件中配置信息（该步骤专业称为：在web.xml文件中注册Servlet类）<br><br>  + 第十步：启动Tomcat服务器<br><br>  + 第十一步：打开浏览器<br><br>    + 注：浏览器上的请求路径要和web.xml文件中的url.pattern一致<br>    + 注：浏览器上的请求路径和web.xml文件中的url.pattern的唯一区别就是：浏览器上带项目名：/crm<br><br>## 解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）<br><br><br><br>## 使用IDEA开发Servlet<br><br>```java<br> <span class="hljs-comment">// 设置响应体的内容类型：普通文本或html</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">//将信息输出到浏览器上需要使用ServletResponse接口：response</span><br>    <span class="hljs-comment">//response表示从服务器向浏览器发送数据叫做响应</span><br>    PrintWriter <span class="hljs-keyword">out</span> = response.getWriter();<br>    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;hello servlet, you are my first servlet!!!&quot;</span>);<br>    <br>    <span class="hljs-comment">// 向浏览器中响应一段html代码</span><br>    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;h1&gt;hello world!&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;这是我第一个webapp！&lt;/h1&gt;&quot;</span>);<br><br><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h3 id="在Servlet中连接数据库"><a href="#在Servlet中连接数据库" class="headerlink" title="在Servlet中连接数据库"></a>在Servlet中连接数据库</h3><ul><li>Servlet是java程序，所以在Servlet中完全可以编写JDBC代码链接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF&#x2F;lib目录下。</li></ul><h3 id="在集成开发环境中开发Servlet程序"><a href="#在集成开发环境中开发Servlet程序" class="headerlink" title="在集成开发环境中开发Servlet程序"></a>在集成开发环境中开发Servlet程序</h3><ul><li>集成开发工具有<ul><li>IDEA</li><li>Eclipse</li></ul></li></ul><h2 id="Servlet对象的生命周期"><a href="#Servlet对象的生命周期" class="headerlink" title="Servlet对象的生命周期"></a>Servlet对象的生命周期</h2><ul><li><p>Servlet对象生命周期</p><ul><li>Servlet是什么时候被创建的</li><li>Servlet对象什么时候被销毁</li><li>Servlet对象创建了几个</li><li>Servlet对象的生命周期表示：一个Servlet对象从出生到死亡的过程</li></ul></li><li><p>Servlet对象的生命周期是由Tomcat服务器全权负责。</p><ul><li>Tomcat服务器通常称为WEB容器</li><li>WEB容器来管理Servlet对象</li></ul></li><li><p>自己新建的Servlet对象不受WEB容器影响</p></li><li><p>WEB容器创建的Servlet对象会被放到HashMap集合中，只有该集合中的Servlet才能被WEB容器管理</p></li><li><p>默认情况下服务器在启动的时候Servlet对象是不会被实例化</p><ul><li>用户在发生请求前，Servlet 对象不会被创建</li></ul></li><li><p>让服务器启动之前创造Servlet对象的方法</p><ul><li><p>在servlet标签中添加<load-on-startup>子标签，在子标签中填整数，整数越小优先级越高</p></li><li><pre><code class="xml">&lt;servlet&gt;       &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;       &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.AServlet&lt;/servlet-class&gt;       &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;   &lt;/servlet&gt;   &lt;servlet-mapping&gt;       &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;       &lt;url-pattern&gt;/a&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt; <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span> Servlet对象的生命周期<br><br><span class="hljs-bullet">  +</span> 用户发送第一次发送请求的时候，init方法执行后，Tomcat服务器马上调用Aservlet对象的service方法<br><span class="hljs-bullet">  +</span> Servlet对象是单例的（单实例的。Servlet对象是单实例的，但是Servlet类不符合单实例模式，我们称之为假单例）<br><span class="hljs-bullet">  +</span> 无参数方法，init方法只在第一次用户发送请求的时候执行（无参数构造方法只执行一次，init方法也只被Tomcat服务器调用一次）<br><span class="hljs-bullet">  +</span> 只要用户发送请求service方法比被执行一次<br><span class="hljs-bullet">  +</span> destroy方法只在服务器关闭的时候被调用<br><span class="hljs-bullet">    +</span> destroy方法执行的时候对象还在，方法结束时，对象的内存才会被Tomcat服务器释放<br><br><span class="hljs-bullet">+</span> Servlet类中方法执行的次数<br><br><span class="hljs-bullet">  +</span> 构造方法只执行一次<br><span class="hljs-bullet">  +</span> init方法只执行一次<br><span class="hljs-bullet">  +</span> service方法：用户请求几次就执行几次<br><span class="hljs-bullet">  +</span> destroy方法执行一次<br><br><span class="hljs-bullet">+</span> 编写一个genericServlet类，这个类是一个抽象类，其中有一个抽象方法service<br><br><span class="hljs-bullet">  +</span> genericServlet实现Servlet接口<br><span class="hljs-bullet">  +</span> genericServlet是一个适配器<br><span class="hljs-bullet">  +</span> 以后编写所有Servlet类继承genericServlet,重写service<br><br><span class="hljs-section">## ServletConfig</span><br><br><span class="hljs-bullet">+</span> ServletConfig是<br><br><span class="hljs-bullet">  +</span> Servlet规范中的一员<br><span class="hljs-bullet">  +</span> 是一个接口<br><span class="hljs-bullet">  +</span> ServletConfig接口是由Tomcat服务器实现<br><span class="hljs-bullet">  +</span> 一个Servlet对象对应一个ServletConfig对象<br><span class="hljs-bullet">  +</span> ServletConfig对象中封装的<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span>标签中的配置信息<br><span class="hljs-bullet">  +</span> ServletConfig对象被翻译为Servlet对象的配置信息对象<br><br><span class="hljs-bullet">+</span> ServletConfig接口的方法<br><br><span class="hljs-bullet">  +</span> <span class="hljs-code">```java</span><br><span class="hljs-code">    public String getInitParameter(String name);//通过初始化参数的name获取Value</span><br><span class="hljs-code">    public Enumeration&lt;String&gt; getInitParameterNames();//获取所有的初始化参数names</span><br><span class="hljs-code">    public ServletContext getServletContext();//获取ServletContext对象</span><br><span class="hljs-code">    public String getServletName();//获取Servlet的name</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>以上的方法在Servlet类当中，都可以用this调用</p></li></ul></li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li><p>一个Servlet对象对应一个ServletConfig</p></li><li><p>在同一个webapp中，所有的Servlet对象都共享同一个ServletContext对象</p></li><li><p>ServletContext对象在服务器启动创建，服务器关闭则销毁（ServletContext对象是应用级对象）</p></li><li><p>一个webapp对应一个ServletContext对象</p></li><li><p>ServletContext被称为Servlet上下文对象（应用域对象）</p></li><li><p>一个ServletContext对应一个web.xml文件</p></li><li><p>ServletContext是一个接口，由Tomcat服务器实现 </p></li><li><p>ServletContext常用的方法</p><ul><li><pre><code class="java">public String getInitParameter(String name);//通过初始化参数的name获取valuepublic Enumeration&lt;String&gt; getInitParameterNames();//获取所有的初始化参数的name<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><br>+ ```java<br>  <span class="hljs-comment">//以上两个方法是ServletContext对象的方法，这个方法获取配置信息</span><br>    &lt;context-<span class="hljs-built_in">param</span>&gt;<br>          &lt;<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;pageSize&lt;/<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;<br>          &lt;<span class="hljs-built_in">param</span>-value&gt;<span class="hljs-number">10</span>&lt;/<span class="hljs-built_in">param</span>-value&gt;<br>      &lt;/context-<span class="hljs-built_in">param</span>&gt;<br>      &lt;context-<span class="hljs-built_in">param</span>&gt;<br>          &lt;<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;startIndex&lt;/<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;<br>          &lt;<span class="hljs-built_in">param</span>-value&gt;<span class="hljs-number">0</span>&lt;/<span class="hljs-built_in">param</span>-value&gt;<br>      &lt;/context-<span class="hljs-built_in">param</span>&gt;<br>   <span class="hljs-comment">//以上配置信息可以在一个项目中共享</span><br>   <span class="hljs-comment">//如果只是想给某一个Servlet配置信息，可以配置在Servlet标签中，使用ServletConfig对象来获取</span><br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">//获取文件的绝对路径（真实路径）public String getRealPath(String path);<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>+ ```java<br>  <span class="hljs-regexp">//</span>ServletContext对象还有另一个名字：应用域<br>  <span class="hljs-regexp">//</span>数据量小、所有用户共享、又不修改，这样的数据放在ServletContext这个应用域中，会大大提升效率<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>缓存机制</p><ul><li>堆内存当中的字符串常量池</li><li>堆内存当中的整数型常量池</li><li>连接池</li><li>线程池</li><li>Redis<ul><li>NoSQL数据库</li><li>想ServletContext应用域中存储数据</li></ul></li></ul></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li><p>协议是一套规范，一套标准，由其他人其他组织制定</p></li><li><p>HTTP协议</p><ul><li>HTTP协议：是W3C制定的超文本传输协议<ul><li>超文本说的就是：不是普通文本，比如流媒体</li><li>HTTP协议支持：不但可以传普通字符串，同样支持声音、视频、图片等流媒体信息</li></ul></li><li>这种协议游走在B和S中间。B想S发送数据要遵循HTTP协议。S向B发数据同样遵循HTTP协议，这样子S和B才能姐耦合<ul><li>解耦合<ul><li>B不依赖S</li><li>S也不依赖B</li></ul></li></ul></li><li>B&#x2F;S表示：B&#x2F;S结构的系统（浏览器访问WEB服务器的系统）</li><li>浏览器向WEB服务器发送数据，叫做请求（request）</li><li>WEB服务器向浏览器发送数据叫响应（response）</li></ul></li><li><p>HTTP协议包括</p><ul><li>请求协议</li><li>响应协议</li></ul></li><li><p>HTTP请求协议</p><ul><li>HTTP请求协议包括：四部分<ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li></ul></li><li><p>HTTP响应协议</p><ul><li>也是四部分<ul><li>状态行<ul><li>三部分组成<ul><li>第一部分：协议版本号</li><li>第二部分：状态码<ul><li>404表示访问的资源不存在，总之404是前端错误</li><li>405表示前端的发送的请求方式和后端请求方式处理不一致时发生的</li><li>500表示服务器端的程序出现了异常</li><li>以4开头一般来说是浏览器端的错误</li><li>以5开头一般来说是服务器端的错误</li></ul></li><li>第三部分：状态的描述信息<ul><li>ok表示正常</li><li>not found 资源找不到</li></ul></li></ul></li></ul></li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li></ul></li><li><p>GET和POST请求的区别</p><ul><li>get请求只能发送普通字符串并且长度有限制</li><li>get无法发送大量数据</li><li>post可以发送任何数据</li><li>post可以发送大量数据</li><li>post请求更危险</li><li>get请求是安全的</li><li>get请求支持缓存（被浏览器缓存）<ul><li>避免get请求走本地浏览器的缓存可以加一个“时间戳”浏览器就不走缓存了</li></ul></li><li>post请求不支持缓存</li></ul></li></ul><h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><ul><li>设计模式就是某种问题的固定的解决方案（可以被重复使用。）</li></ul><h2 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h2><ul><li>HttpServlet类是专门为HTTP协议准备的</li></ul><p>​      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><span class="hljs-comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-comment">//override 重写 doGet方法</span><br>    <span class="hljs-comment">//override 重写 doPost方法</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>, ServletConfig,<br>        java.io.Serializable &#123;<br>           <br><span class="hljs-comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">this</span>.config = config;<br>        <span class="hljs-built_in">this</span>.init();<br>    &#125;<br><span class="hljs-comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">// NOOP by default</span><br>    &#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>后端重写doGet方法，前端用get请求</li><li>后端重写doPostt方法，前端用post请求（可以有效避免405错误）</li><li>Servlet类的开发步骤<ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或doPost方法 </li><li>第三步：将Servlet配置到web.xml文件中</li><li>第四步：准备前端页面（form表单）</li></ul></li></ul><h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><ul><li><p>web站点的欢迎页面是：当你访问这个webapp或者这个web站点的时候没有指定任何资源路径，会默认访问欢迎页面。</p></li><li><p>设置欢迎页面的步骤</p><ul><li><p>第一步：在web目录下新建login.html</p></li><li><p>第二步：在web.xml文件中进行配置</p><ul><li><pre><code class="xml">    &lt;welcome-file-list&gt;        &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 第三步：启动服务器输入地址<br><br><span class="hljs-bullet">+</span> 绕过在webapp的根目录下新建一个目录，目录中再建一个文件<br><br><span class="hljs-bullet">  +</span> webapp下新建page1<br><br><span class="hljs-bullet">  +</span> page1下新建page2目录<br><br><span class="hljs-bullet">  +</span> page2里新建page.html<br><br><span class="hljs-bullet">    +</span> 只需这样配<br><br><span class="hljs-bullet">    +</span> <span class="hljs-code">```xml</span><br><span class="hljs-code">      &lt;welcome-file-list&gt;</span><br><span class="hljs-code">              &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;</span><br><span class="hljs-code">          &lt;/welcome-file-list&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>路径不用以”&#x2F;“开始</p></li></ul></li></ul></li><li><p>一个webapp可以设置多个欢迎页面，越靠上优先级越高</p></li><li><p>欢迎页面配置可以在两个地方配置</p><ul><li>一个是webapp内部的web.xml文件（局部配置）</li><li>一个是CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中配置（全局配置）<ul><li>局部优先原则</li></ul></li></ul></li><li><p>欢迎页也可以是Servlet</p></li><li><p>步骤</p><ul><li><p>第一步：写一个Servlet</p><ul><li><pre><code class="java">public class WelcomeServlet extends HttpServlet &#123;    protected void doGet(HttpServletRequest request, HttpServletResponse response)        throws SecurityException, IOException&#123;        response.setContentType(&quot;text/html&quot;);            PrintWriter out = response.getWriter();            out.print(&quot;&lt;h1&gt;bjpowernode! welcome&lt;/h1&gt;&quot;);    &#125;&#125;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>+ 第二步：在web.xml中配置Servlet<br><br>  + ```xml<br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>welcomeservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>welcomeservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/welcome<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>第三步：web.xml中配置欢迎页</p><ul><li><pre><code class="xml">&lt;welcome-file-list&gt;        &lt;welcome-file&gt;welcome&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-comment">## 关于WEB-INF目录</span><br><br>+ 因为放在WEB-INF目录中的资源是受保护的，在浏览器上不可直接访问，所有像HTML,CSS,JS,image等静态资源放在WEB-INF目录外<br><br><span class="hljs-comment">## HttpServletRequest接口详解</span><br><br>+ HttpServletRequest是一个接口，全限定名称：org.apache.catalina.connector.RequestFacade@<span class="hljs-number">6</span>bd33ab6<br><br>+ HttpServletRequest接口是Servlet规范中的一员<br><br>+ HttpServletRquest接口的父接口是：ServletRequest<br><br>+ HttpServletRequest接口中的常用方法<br><br>  + 获取前端浏览器用户提交数据的方法<br><br>    + ```<span class="language-javascript">java</span><br><span class="language-javascript">      <span class="hljs-title class_">String</span> <span class="hljs-title function_">getParameter</span>(<span class="hljs-title class_">String</span> name)<span class="hljs-comment">//获取value数组中的一维数组第一个元素</span></span><br><span class="language-javascript">      <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">String</span>[]&gt;<span class="hljs-title function_">getParameterMap</span>()<span class="hljs-comment">//获取Map</span></span><br><span class="language-javascript">      <span class="hljs-title class_">Enumeration</span>&lt;<span class="hljs-title class_">String</span>&gt;<span class="hljs-title function_">getParameterNames</span>()<span class="hljs-comment">//获取Map中的所有key</span></span><br><span class="language-javascript">      <span class="hljs-title class_">String</span>[] <span class="hljs-title function_">getParameterValuse</span>(<span class="hljs-title class_">String</span>.<span class="hljs-property">name</span>)<span class="hljs-comment">//根据key获取Map集合中的value</span></span><br><span class="language-javascript">          <span class="hljs-comment">//以上四个方法，和获取用户提交数据有关</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>request对象又称为”请求域对象”</p><ul><li><p>ServletContext应用域的三个操作方法</p><ul><li><pre><code class="java">void setAttribute (String name,Object obj);//向域中绑定数据Object getAttribute(String name);//从域当中根据name获取数据void removeAttribute(String name);//将域当中绑定数据移除//以上操作类似Map集合的操作<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>+ 请求域对象<br><br>  + 一个请求对象对应一个请求域<br><br>  + 请求域对象比应用域对象范围小且生命周期短<br><br>  + 请求域也有三个对象<br><br>    + ```<span class="hljs-function">java</span><br><span class="hljs-function">      <span class="hljs-type">void</span> <span class="hljs-title">setAttribute</span> <span class="hljs-params">(<span class="hljs-type">String</span> name,Object obj)</span></span>;<span class="hljs-comment">//向域中绑定数据</span><br>      <span class="hljs-function">Object <span class="hljs-title">getAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>;<span class="hljs-comment">//从域当中根据name获取数据</span><br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>;<span class="hljs-comment">//将域当中绑定数据移除</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>跳转</p><ul><li><p>转发</p></li><li><pre><code class="java">//第一步：获取请求转发器对象RequestDispatcher dispatcher =request.getRequestDispatcher(&quot;/b&quot;)    //第二步    dispatcher.forward(request,response)    //一二可以合并    request.getRequestDispatcher(&quot;/b&quot;).forward(request,response)<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>+ request对象中容易混淆的两个方法<br><br>  + ```java<br>    String username =request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <br>    Object obj =request.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-regexp">//</span>第一个方法是获取用户在浏览器上提交的数据<br>    <span class="hljs-regexp">//</span>第二个是请求域中绑定的数据<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>HttpServletRequest接口其他常用方法</p><ul><li><pre><code class="java">//获取客户端IP地址String remoteAddr =request.getRemoteAddr();//设置请求体的字符集（解决post上传乱码问题）request.setCharacterEncoding(&quot;UTF-8&quot;);//Tomcat9以及之前的需要解决//Tomcat9之前响应中文乱码问题解决方法response.setContentType(&quot;text/html;charset=UTF-8&quot;)    //Tomcat10之后就不用了            //get乱码可以修改CATALINA_HOME/conf/server.xml配置文件    &lt;Connector UROEmcoding=&quot;UTF-8&quot;/&gt;        //获取应用的根路径    String contextPath =request.getContextPath();//获取请求方式String method=request.getMethod();//获取请求的URIString uri =request.getRequestURI();  // //aa/test//获取servlet pathString servletPath =request.getServletPath(); //不用文件目录<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><br>## 使用纯Servlet做一个单表的CRUD操作<br><br><span class="hljs-operator">+</span> 使用纯粹的Servlet完成单表【对部门的】增删改查操作（B<span class="hljs-operator">/</span>S结构）<br><br>  <span class="hljs-operator">+</span> 第一步准备一张数据表<br><br>    <span class="hljs-operator">+</span> ```mysql<br>      <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> dept;<br>      <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>      deptno <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>      dname <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>      loc <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>      );<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno,dname,loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;销售部&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno,dname,loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;研发部&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno,dname,loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;技术部&#x27;</span>,<span class="hljs-string">&#x27;广州&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno,dname,loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;媒体部&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>);<br>      <span class="hljs-keyword">commit</span>;<br>      <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>第二步：准备HTML页面（项目原型）</p><ul><li>需要设计的页面<ul><li>新增页面：add.html</li><li>修改页面:edit.html</li><li>详情页面 :detali.html</li><li>欢迎页面：index.html</li><li>部门页面：list.html（以列表页面为核心）</li></ul></li></ul></li><li><p>第三步分析系统功能</p><ul><li>只要操作链接数据库就表示一个功能</li></ul></li><li><p>第四步：在IDEA当中搭建开发环境</p><ul><li>创建一个webapp（给这个webapp添加servlet-api.jar和 ）</li><li>向webapp中添加链接数据库的jar包<ul><li>在WEB-INF目录下新建lib目录，将jar包放在其中</li></ul></li><li>JDBC的工具类</li><li>将所有HTML页面拷贝到web目录下</li></ul></li><li><p>第五步：实现第一个功能：查看部门列表</p><ul><li><p>第一：先修改前端页面的超链接</p><ul><li><pre><code class="html">    &lt;a href=&quot;/oa/dept/list&quot;&gt;查看部门列表&lt;/a&gt;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>+ 第二：编写xml文件<br><br>  + ```xml<br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bjpowernode.OA.web.action.DeptListServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dept/list<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>第三：编写DeptlistServlet类继承HttpServlet类，然后重写doGet方法</p><ul><li><pre><code class="java">package com.bjpowernode.OA.web.action;import com.sun.net.httpserver.HttpServer;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;public class DeptListServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;            &#125;&#125;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 第四：在doGet方法中链接数据库，查询所有部门<br><br><span class="hljs-bullet">    +</span> 所有双引号变成单引号<br><br><span class="hljs-bullet">+</span> 第六步：查看部门详情<br><br><span class="hljs-bullet">  +</span> 详情，连接数据库<br><br><span class="hljs-bullet">    +</span> <span class="hljs-code">```java</span><br><span class="hljs-code">      &lt;a href=&#x27;&quot;+contextPath+&quot;/dept/list?deptno=&quot;+deptno+&quot;&#x27;&gt;详情&lt;/a&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>解决404问题</p><ul><li><p>配置xml文件</p></li><li><pre><code class="xml">    &lt;servlet&gt;        &lt;servlet-name&gt;detail&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptDetailServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;detail&lt;/servlet-name&gt;        &lt;url-pattern&gt;/dept/detail&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>+ 编写一个类 重写doGet方法<br><br>  + ```java<br>    <span class="hljs-keyword">package</span> com.bjpowernode.oa.web.action;<br>    <br>    <span class="hljs-keyword">import</span> jakarta.servlet.<span class="hljs-type">ServletException</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServlet</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br>    <br>    <br>    <span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br>    <br>    public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptDetailServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>    <br>        &#125;<br>    &#125;<br>    <br></code></pre></td></tr></table></figure></code></pre></li><li><p>在doGet中连接数据库，根据部门编号查询该部门信息</p></li></ul></li></ul></li><li><p>第七步：删除部门</p><ul><li><p>将前端代码写入后端的java代码中</p><ul><li><pre><code class="java">out.print(&quot;&lt;script type =&#39;text/javascript&#39;&gt;&quot;);   out.print(&quot;        function del(dno)&#123;&quot;);   out.print(&quot;                if (window.confirm(&#39;删了就不能恢复了&#39;))&#123;&quot;);   out.print(&quot;                    document.location.href=&#39;&quot;+contextPath+&quot;/dept/delete?deptno&#39;+dno&quot;);   out.print(&quot;                &#125;&quot;);   out.print(&quot;&#125;&quot;);   out.print(&quot;&lt;/script&gt;&quot;); <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>+ 解决<span class="hljs-number">404</span>问题<br><br>+ 配置<span class="hljs-type">xml</span>文件<br><br>  + ```<span class="hljs-type">xml</span><br>        &lt;servlet&gt;<br>            &lt;servlet-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">delete</span>&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>            &lt;servlet-<span class="hljs-keyword">class</span>&gt;com.bjpowernode.oa.web.action.DeptDeleteServlet&lt;/servlet-<span class="hljs-keyword">class</span>&gt;<br>        &lt;/servlet&gt;<br>        &lt;servlet-<span class="hljs-keyword">mapping</span>&gt;<br>            &lt;servlet-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">delete</span>&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>            &lt;url-pattern&gt;/dept/<span class="hljs-keyword">delete</span>&lt;/url-pattern&gt;<br>        &lt;/servlet-<span class="hljs-keyword">mapping</span>&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>编写DepDeleteServlet</p></li><li><p>重写doGet方法</p><ul><li><pre><code class="java">package com.bjpowernode.oa.web.action;import javax.servlet.*;import javax.servlet.http.*;import java.io.IOException;public class DeptDeleteServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException &#123;                &#125;&#125;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 第八步：新增部门<br><br><span class="hljs-bullet">    +</span> 注意：最后保存到/dept/list会出现405以为保存是post请求，底层要doGEt方法<br><span class="hljs-bullet">    +</span> 解决方法<br><span class="hljs-bullet">      +</span> 第一种在/dept/list Servlet中添加doPost方法，然后在doPost方法中调用doGet方法<br><span class="hljs-bullet">      +</span> 重定向<br><br><span class="hljs-bullet">  +</span> 第九步：跳转到修改部门<br><br><span class="hljs-bullet">  +</span> 第十步：修改部门<br><br><span class="hljs-section">## 在一个web应用中应该如何完成资源的跳转</span><br><br><span class="hljs-bullet">+</span> web应用中通过两种方式，可以完成资源的跳转<br><br><span class="hljs-bullet">  +</span> 第一种：转发<br><span class="hljs-bullet">  +</span> 第二种：重定向<br><br><span class="hljs-bullet">+</span> 转发和重定向的区别<br><br><span class="hljs-bullet">  +</span> 代码上区别<br><br><span class="hljs-bullet">    +</span> 转发<br><br><span class="hljs-bullet">      +</span> <span class="hljs-code">```java</span><br><span class="hljs-code">         </span><br><span class="hljs-code">        //获取请求转发器对象</span><br><span class="hljs-code">        request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request,response);</span><br><span class="hljs-code">        //调用请求转发器对象的forward方法完成转发</span><br><span class="hljs-code">        dispacher.forward(request,response);</span><br><span class="hljs-code">        </span><br><span class="hljs-code">        //合并一行代码</span><br><span class="hljs-code">        request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request.response);</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>重定向</p><ul><li><pre><code class="java">response.sendRedirect(request.getContextPath()+&quot;/b&quot;);//路径上要加项目名<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 重定向和转发的本质区别<br><br><span class="hljs-bullet">    +</span> 转发由web服务器来控制（转发请求一次）<br><span class="hljs-bullet">    +</span> 重定向：是浏览器完成的（重定向请求两次）<br><span class="hljs-bullet">    +</span> 如果需要从其他Servlet 的<br><br><span class="hljs-section">## Servlet注解，简化配置</span><br><br><span class="hljs-bullet">+</span> Servlet注解的优点<br><span class="hljs-bullet">  +</span> 开发效率高<br><span class="hljs-bullet">  +</span> web.xml文件体积变小<br><span class="hljs-bullet">+</span> @WebServlet注解的属性<br><span class="hljs-bullet">  +</span> name属性:用来指定Servlet的名字等同于<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="hljs-bullet">  +</span> urlPatterns属性：用来指定Servlet的映射路径，可以指定多个字符串。<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="hljs-bullet">  +</span> loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet<br><span class="hljs-bullet">  +</span> value属性：当前注解的属性名是value的时候，value属性名可以省略<br><br><span class="hljs-section">## 关于B/S结构系统的会话机制（session机制）</span><br><br><span class="hljs-bullet">+</span> session就是会话<br><br><span class="hljs-bullet">+</span> 用户打开浏览器，经过一系列操作，然后关闭浏览器就是一次会话<br><br><span class="hljs-bullet">+</span> session机制属于B/S结构的一部分,session机制实际上一种规范<br><br><span class="hljs-bullet">+</span> session对象主要作用是：保存会话状态<br><br><span class="hljs-bullet">+</span> session对象的实现原理<br><br><span class="hljs-bullet">  +</span> HttpSession session =request.getSession();<br><span class="hljs-bullet">  +</span> JSESSION=XXXXX.这个是以cookie的形式保存在浏览器内存中，浏览器关闭cookie就没了<br><span class="hljs-bullet">  +</span> session列表是一个Map，map的key是sessionid，map 的value是session对象<br><br><span class="hljs-bullet">+</span> 总结目前所学到的域对象<br><br><span class="hljs-bullet">  +</span> request（请求域）（请求级别）<br><span class="hljs-bullet">  +</span> session（会话域）（用户级别）<br><span class="hljs-bullet">  +</span> application（应用域）（项目级别）<br><br><span class="hljs-bullet">+</span> 三个域对象的大小关系<br><br><span class="hljs-bullet">  +</span> request<span class="language-xml">&lt;session<span class="hljs-tag">&lt;<span class="hljs-name">application</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">+ <span class="hljs-attr">三个域都有的公共方法</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">  + <span class="hljs-attr">setAttribute</span>（<span class="hljs-attr">向域中绑定数据</span>）</span></span><br><span class="hljs-tag"><span class="language-xml">  + <span class="hljs-attr">getAttribute</span>（<span class="hljs-attr">向域中获取数据</span>）</span></span><br><span class="hljs-tag"><span class="language-xml">  + <span class="hljs-attr">removeAttribute</span>（<span class="hljs-attr">删除域中的数据</span>）</span></span><br><span class="hljs-tag"><span class="language-xml">  + <span class="hljs-attr">使用原则</span>：<span class="hljs-attr">尽量使用小的域</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">+ <span class="hljs-attr">session销毁</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">  + ```<span class="hljs-attr">java</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">session.invalidate</span>();</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li><p>Cookie最终保存在浏览器客户端上的</p></li><li><p>cookie和session机制都是为了保存会话状态</p></li><li><p>cookie是将会话状态保存在浏览器客户端上</p></li><li><p>session是将会话状态保存在服务器端上</p></li><li><p>用java设置cookie有效方法</p><ul><li>cookie.setMaxAge(60*60), 设置cookie在一小时后失效</li><li>cookie有效时间&#x3D;0<ul><li>cookie被删除</li></ul></li></ul></li><li><p>手动设置cookie的path</p><ul><li><p>cookie.setPath(“&#x2F;Servlet03”):表示只要是servlet13项目的请求路径都会提交该cookie给服务器</p></li><li><p>服务器java接受cookie</p><ul><li><pre><code class="java">Cookie[] cookies =request.getCookies();if(cookies!=null)&#123;    for(Cookie cookie:cookies)&#123;    //获取cookiename    String name =cookie.getName();    //获取value    String value =cookie.getValue();    &#125;&#125;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">      </span><br><span class="hljs-code"></span><br><span class="hljs-section"># JSP</span><br><br><span class="hljs-bullet">+</span> jsp实际上就是一个Servlet<br><br><span class="hljs-bullet">+</span> JSP<br><br><span class="hljs-bullet">  +</span> jsp是java程<br><span class="hljs-bullet">  +</span> JSP也是javaEE的13个子规范之一<br><br><span class="hljs-bullet">+</span> JSP的基础语法<br><br><span class="hljs-bullet">  +</span> jsp的page指令解决中文乱码问题<br><br><span class="hljs-bullet">    +</span> <span class="hljs-code">```jsp</span><br><span class="hljs-code">      &lt;%@page contentType=&quot;text/html;charset=UTF-8&quot;%&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>在&lt;% java语句; %&gt;</p><ul><li>在这个符号中的语句将被识别为java程序。被翻译到Servlet类的service方法内部</li><li>在service方法当中编写的代码是由顺序的</li></ul></li><li><p>jsp的注释</p><ul><li><pre><code class="jsp">&lt;%-- JSP的专业注释--%&gt;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> jsp的输出语句<br><br><span class="hljs-bullet">    +</span> out.write(),因为out是JSP的九大内置对象之一，可以直接用，只能正在service方法内部使用  <br><span class="hljs-bullet">    +</span> &lt;% String name =&quot;jack&quot;;out.write(&quot;name =&quot;+name);%&gt;<br><span class="hljs-bullet">    +</span> 输出无java代码直接在jsp编写就行<br><span class="hljs-bullet">    +</span> 如果输出的内容有java代码，这个时候可以用<br><span class="hljs-bullet">      +</span> &lt;%=%&gt;  在=后面编写要输出的内容<br><span class="hljs-bullet">      +</span> &lt;% =%&gt;在java代码中翻译为 out.print();<br><br><span class="hljs-bullet">  +</span> &lt;%!  %&gt;<br><br><span class="hljs-bullet">    +</span> 这个符号内编写的java程序会自动翻译到service方法外<br><br><span class="hljs-bullet">  +</span> 用jsp和Servlet完成oa项目<br><br><span class="hljs-bullet">    +</span> 使用Servlet处理业务，收集数据<br><span class="hljs-bullet">    +</span> 将原先的html文件改为jsp文件，并且在jsp文件头添加page指令（指定contentType防止中文乱码），将jsp放在WEB根目录下<br><span class="hljs-bullet">    +</span> 完成跳转<br><span class="hljs-bullet">    +</span> Servlet中连接数据库了，遍历结果集<br><span class="hljs-bullet">      +</span> ​将遍历的结果集封装成java对象<br><span class="hljs-bullet">      +</span> 将java对象放在List集合中<br><span class="hljs-bullet">      +</span> 将List集合存储到request域中<br><span class="hljs-bullet">      +</span> 转发forward到jsp<br><span class="hljs-bullet">    +</span> 在jsp中<br><span class="hljs-bullet">      +</span> 从域中取出List集合<br><span class="hljs-bullet">      +</span> 遍历集合<br><span class="hljs-bullet">    +</span> JSP文件的扩展名可以不是jsp<br><span class="hljs-bullet">      +</span> 在CATALINA<span class="hljs-emphasis">_HOME/conf/web.xml，可以配置jsp文件的扩展名</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + 实现登入功能</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">    + 步骤1：在数据库中添加用户表</span><br><span class="hljs-emphasis">    + 步骤2：先实现登录页面</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">+ JSP的指令</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + 指令的作用：指导jsp的翻译工作</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + 指令</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">    + include：包含指令，在jsp中完成静态包含</span><br><span class="hljs-emphasis">    + taglib：引入标签库指令</span><br><span class="hljs-emphasis">    + page</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + 指令的使用语法</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">    + &lt;%@指令名 属性名=属性值 属性名=属性值 ...%&gt;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  + page指令常用的属性</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">    + ```</span><br><span class="hljs-emphasis">      &lt;%@page session =&quot;true|false&quot;%&gt;</span><br><span class="hljs-emphasis">      true表示启动JSP的内置对象session，表示一定启动session对象 ，默认值就是session =true</span><br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="hljs">&lt;%@page contentType=&quot;text/json&quot;%&gt;contentType属性用来设置响应的内容类型同时也可以设置字符集&lt;%page contentType=&quot;text/json:charset=UTF_8&quot;%&gt;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ ```<br>  &lt;%@page pageEncoding =<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>  pageEncoding =<span class="hljs-string">&quot;UTF-8&quot;</span>表示设置响应时采用的字符集<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="hljs">&lt;%@page import=&quot;java.util&quot;%&gt;导包语句<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>+ ```<br>  &lt;%<span class="hljs-meta">@page</span> errorPage=<span class="hljs-string">&quot;error/jsp&quot;</span>%&gt;<br>  当页面出现异常用户，跳转到<span class="hljs-keyword">error</span>.jsp<br>  errorPage属性用来指定当前出错之后跳转位置<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="hljs">&lt;%@page isErrorPage =&quot;true&quot;%&gt;表示启用JSP的九大内置对象:exception默认值是false<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">      </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">+</span> JSP的九大内置对象<br><br><span class="hljs-bullet">  +</span> jakarta.servlet.jsp.PageContext pageContext 页面作用域<br><span class="hljs-bullet">  +</span> jakarta.servlet.http.HttpServletRequest request 请求作用域<br><span class="hljs-bullet">  +</span> jakarta.servlet.http.HttpSession session 会话作用域<br><span class="hljs-bullet">  +</span> jakarta.servlet.ServletContext application 应用作用域<br><span class="hljs-bullet">    -</span> pageContext &lt; request &lt; session &lt; application<br><span class="hljs-bullet">    -</span> 以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法<br><span class="hljs-bullet">    -</span> 以上作用域的使用原则：尽可能使用小的域<br><span class="hljs-bullet">  +</span> java.lang.Throwable exception<br><span class="hljs-bullet">  +</span> jakarta.servlet.ServletConfig config<br><span class="hljs-bullet">  +</span> java.lang.Object page （其实是this，当前的servlet对象）<br><span class="hljs-bullet">  +</span> jakarta.servlet.jsp.JspWriter out （负责输出）<br><span class="hljs-bullet">  +</span> jakarta.servlet.http.HttpServletResponse response （负责响应）<br><br><br><span class="hljs-section">## EL表达式</span><br><br><span class="hljs-bullet">+</span> EL表达式<br><br><span class="hljs-bullet">  +</span> Expression Language<br><span class="hljs-bullet">  +</span> EL表达式可以代替jsp中的java代码 <br><span class="hljs-bullet">  +</span> 从每个作用域中取数据，然后将其转换成字符串。然后将其输出到浏览器。这就是EL表达式的三大功效<br><span class="hljs-bullet">    +</span> 第一功效：从某个域中取数据<br><span class="hljs-bullet">      +</span> 四个域<br><span class="hljs-bullet">        +</span> pageContext<br><span class="hljs-bullet">        +</span> request<br><span class="hljs-bullet">        +</span> session<br><span class="hljs-bullet">        +</span> application<br><span class="hljs-bullet">    +</span> 第二功效：将取出的数据转成字符串<br><span class="hljs-bullet">      +</span> 如果<br><span class="hljs-bullet">    +</span> 第三功效：将字符串输出到浏览器 <br><br><span class="hljs-bullet">+</span> EL表达的基本语法<br><br><span class="hljs-bullet">  +</span> $&#123;表达式&#125;<br><br><span class="hljs-bullet">+</span> EL表达式获取 <br><br><span class="hljs-bullet">  +</span> $&#123;需要获取的&#125;<br><span class="hljs-bullet">  +</span> EL表达式调用了底层getxxx()方法 <br><br><span class="hljs-bullet">+</span> 没指定范围的前提下，EL表达式优先从小范围中读取数据<br><br>  <span class="hljs-code">```java</span><br><span class="hljs-code">  JSP//范围指定</span><br><span class="hljs-code">  $&#123;pageContext.data&#125;</span><br><span class="hljs-code">  $&#123;requestScope.data&#125;</span><br><span class="hljs-code">  $&#123;sessionScope.data&#125;</span><br><span class="hljs-code">  $&#123;applicationScope.data&#125;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>EL表达式对null进行了预处理  ，如果是null，则向浏览器输出一个空字符</p></li><li><p>EL表达式取数据的时候有两种形式</p><ul><li><p>第一种：.(大部分使用这种方式· （大部分使用这种）</p></li><li><p>第二种：[]（如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）</p><ul><li><code>request.setAttribute(“abc.def”, “zhangsan”);</code></li><li>应该是<code>$&#123;requestScope[“abc.def”]&#125;</code></li></ul></li><li><p>掌握使用EL表达式，怎么从Map集合中取数据：</p><ul><li><code>$&#123;map.key&#125;</code></li></ul></li><li><p>掌握使用EL表达式，怎么从数组和List集合中取数据：</p><ul><li><code>$&#123;数组[0]&#125;</code></li><li><code>$&#123;数组[1]&#125;</code></li><li><code>$&#123;list[0]&#125;</code></li></ul></li><li><p>page指令当中，有一个属性，可以忽略EL表达式</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">JSP&lt;%@page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> isELIgnored=<span class="hljs-string">&quot;true&quot;</span> %&gt; 全局控制忽略EL表达式<br>局部控制：\$&#123;username&#125; 也可以忽略EL表达式<br></code></pre></td></tr></table></figure></li><li><p>EL表达式获取应用的根：</p><ul><li><code>$&#123;pageContext.request.contextPath&#125;</code></li></ul></li><li><p>其他的隐式对象：</p><ul><li><code>pageContext</code>：通过这个<code>pageContext</code>可以在EL表达式中获取<code>request</code>等其他<code>jsp</code>的九大内置对象<ul><li><code>param</code>：取一个值，如果是多个值的话，只取第一个数值</li><li><code>paramValues</code>：取多个值，用数组下标可以进行访问</li><li><code>initParam</code>：获取Servlet上下文对象ServletContext中的属性内容</li></ul></li></ul></li></ul></li><li><p>EL表达式的运算符</p><ul><li>算术运算符<ul><li><code>+、-、*、/、%</code></li><li>这里的“+”永远只能用于求和，非数字则转为数字</li></ul></li><li>关系运算符<ul><li><code>== eq != &gt; &gt;= &lt; &lt;=</code></li><li>&#x3D;&#x3D; 和eq底层都是调用的equals方法</li></ul></li><li>逻辑运算符<ul><li><code>! &amp;&amp; || not and or</code></li></ul></li><li>条件运算符<ul><li><code>? :</code></li></ul></li><li>取值运算符<ul><li><code>[ ]</code>和<code>.</code></li></ul></li><li>empty运算符<ul><li><code>empty</code>运算符的结果是<code>boolean</code>类型</li><li><code>$&#123;empty param.username&#125;</code></li></ul></li></ul></li><li><p>注意事项</p><ul><li><code>ServletContext</code>对象是<code>Servlet</code>上下文对象，对应的是<code>JSP</code>九大内置对象的<code>application</code></li><li><code>pageContext.getRequest()</code>获取的是<code>SerevletRequest</code></li><li><code>getContextPath</code>只有<code>HttpServlet</code>有</li></ul></li></ul><h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><ul><li><p>JSTL</p><ul><li>java standard tab lib</li><li>JSTL通常和EL表达一起使用，为了让JSP中的java代码消失</li></ul></li><li><p>使用JSTL标签库的步骤</p><ul><li><p>第一步：引入JSTL标签库对应的jar包</p><ul><li>jar包为<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li><li>需要将jar包放在WEBINF&#x2F;lib</li></ul></li></ul></li><li><p>第二步：在JSP中引入标签库</p><ul><li><pre><code class="hljs">&lt;%@taglib prefix=&quot;&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;核心标签库<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  +</span> 第三步：在需要使用标签的位置使用就可以了<br><br><span class="hljs-bullet">+</span> tld配置文件解析<br><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>MARKUP<tag><br>    <description>对该标签的描述</description><br>    <name>catch</name> 标签的名字<br>    <tag-class>org.apache.taglibs.standard.tag.common.core.CatchTag</tag-class> 标签对应的java类。<br>    <body-content>JSP</body-content> 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。<br>    <attribute><br>        <description><br>            对这个属性的描述<br>        </description><br>        <name>var</name> 属性名<br>        <required>false</required> false表示该属性不是必须的。true表示该属性是必须的。<br>        <rtexprvalue>false</rtexprvalue> 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。<br>    </attribute><br>  </tag></p><p>&lt;c:catch var&#x3D;””&gt;<br>    JSP….<br></c:catch></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">+ core标签库中常用的标签</span><br><span class="language-xml"></span><br><span class="language-xml">  - `c:if`</span><br><span class="language-xml"></span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">“boolean类型，支持EL表达式”</span>&gt;</span>&lt;/c: if&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  - `c:forEach`</span><br><span class="language-xml"></span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">“集合，支持EL表达式”</span> <span class="hljs-attr">var</span>=<span class="hljs-string">“集合中的元素”</span> <span class="hljs-attr">varStatus</span>=<span class="hljs-string">“元素状态对象”</span>&gt;</span> $</span><span class="hljs-template-variable">&#123;元素状态对象.count&#125;</span><span class="language-xml"> &lt;/c: forEach&gt;</span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">var</span>=<span class="hljs-string">“i”</span> <span class="hljs-attr">begin</span>=<span class="hljs-string">“1”</span> <span class="hljs-attr">end</span>=<span class="hljs-string">“10”</span> <span class="hljs-attr">step</span>=<span class="hljs-string">“2”</span>&gt;</span> $</span><span class="hljs-template-variable">&#123;i&#125;</span><span class="language-xml"> &lt;/c: forEach&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  - `c:choose c:when c:otherwise`</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>  JSP&lt;c:choose&gt;<br>      &lt;c:when test&#x3D;”${param.age &lt; 18}”&gt;<br>          青少年<br>      </c:when><br>      &lt;c:when test&#x3D;”${param.age &lt; 35}”&gt;<br>          青年<br>      </c:when><br>      &lt;c:when test&#x3D;”${param.age &lt; 55}”&gt;<br>          中年<br>      </c:when><br>      &lt;c:otherwise&gt;<br>          老年<br>      </c:otherwise><br>  </c:choose><br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## Filter过滤器</span><br><br><span class="hljs-bullet">+</span> Filter是过滤器<br><span class="hljs-bullet">  +</span> Filter可以在Servlet这个目标执行之前添加代码。也可以在目标Servlet执行之后添加代码。<br><span class="hljs-bullet">  +</span> 一般情况下都是在过滤器中编写公共代码<br><span class="hljs-bullet">+</span> 过滤器的编写过程<br><span class="hljs-bullet">  +</span> 第一步：编写一个java类 实现接口：jarkata.servlet.Filter。并实现这个接口当中的方法<br><span class="hljs-bullet">    +</span> init方法：在Filter对象第一次被创建之后调用，并且只调用一次<br><span class="hljs-bullet">    +</span> doFilter方法： 只要用户发送一次请求就执行一次<br><span class="hljs-bullet">    +</span> destroy方法：在Filter对象被释放/销毁之前调用，并且只调用一次<br><span class="hljs-bullet">  +</span> 第二步：在web.xml文件中对Filter进行配置<br><span class="hljs-bullet">  +</span> <span class="hljs-code">`Servlet`</span>对象默认情况下，在服务器启动的时候是不会新建对象的<br><span class="hljs-bullet">  +</span> <span class="hljs-code">`Filter`</span>对象默认情况下，在服务器启动的时候会新建对象<br><span class="hljs-bullet">  +</span> <span class="hljs-code">`Servlet`</span>是单例的。<span class="hljs-code">`Filter`</span>也是单例的（单实例）<br><span class="hljs-bullet">+</span> 目标<span class="hljs-code">`Servlet`</span>是否执行，取决于两个条件：<br><span class="hljs-bullet">  -</span> 在过滤器当中是否编写了：<span class="hljs-code">`chain.doFilter(request, response);`</span><br><span class="hljs-bullet">  -</span> 用户发送的请求路径是否和<span class="hljs-code">`Servlet`</span>的请求路径一致。<br><span class="hljs-bullet">+</span> <span class="hljs-code">`chain.doFilter(request, response);`</span> 的作用<br><span class="hljs-bullet">  -</span> 执行下一个过滤器，如果下面没有过滤器了，执行最终的<span class="hljs-code">`Servlet`</span><br><span class="hljs-bullet">+</span> <span class="hljs-code">`Filter`</span>的生命周期<br><span class="hljs-bullet">  -</span> 和<span class="hljs-code">`Servlet`</span>对象生命周期一致<br><span class="hljs-bullet">  -</span> 区别在<span class="hljs-code">`Filter`</span>默认情况下，在服务器启动阶段就实例化<br><span class="hljs-bullet">+</span> 路径配置<br><span class="hljs-bullet">  -</span> 关于<span class="hljs-code">`Filter`</span>的配置路径：<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`/a.do`</span>、<span class="hljs-code">`/b.do`</span>、<span class="hljs-code">`/dept/save`</span>。这些配置方式都是精确匹配<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`/*`</span> 匹配所有路径<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`*.do`</span> 后缀匹配，不要以 <span class="hljs-code">`/`</span> 开始（模糊匹配的扩展匹配）<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`/dept/*`</span> 前缀匹配<br><span class="hljs-bullet">+</span> 执行顺序<br><span class="hljs-bullet">  -</span> <span class="hljs-code">`Filter`</span>的优先级，天生的就比<span class="hljs-code">`Servlet`</span>优先级高<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`/a.do`</span> 对应一个<span class="hljs-code">`Filter`</span>，也对应一个<span class="hljs-code">`Servlet`</span>。那么一定是先执行<span class="hljs-code">`Filter`</span>，然后再执行<span class="hljs-code">`Servlet`</span><br><span class="hljs-bullet">  -</span> 在<span class="hljs-code">`web.xml`</span>文件中进行配置的时候，<span class="hljs-code">`Filter`</span>的执行顺序<br><span class="hljs-bullet">    -</span> 依靠<span class="hljs-code">`filter-mapping`</span>标签的配置位置，越靠上优先级越高<br><span class="hljs-bullet">    -</span> 过滤器的调用顺序，遵循栈数据结构<br><span class="hljs-bullet">  -</span> 使用<span class="hljs-code">`@WebFilter`</span>的时候，<span class="hljs-code">`Filter`</span>的执行顺序<br><span class="hljs-bullet">    -</span> 在字典中比较<span class="hljs-code">`Filter`</span>类名<br><span class="hljs-bullet">    -</span> 但是一般情况都是使用<span class="hljs-code">`web.xml`</span>进行配置<br><span class="hljs-bullet">+</span> 责任链设计模式<br><span class="hljs-bullet">  +</span> 核心思想：在程序的运行阶段，动态的组合程序的调用顺序<br><span class="hljs-bullet">+</span> 过滤器最大的优点就是在程序的编译阶段不会确定调用顺序<br><span class="hljs-bullet">+</span> 使用过滤器改造OA项目<br><span class="hljs-bullet">  -</span> 注意在<span class="hljs-code">`Filter`</span>中的<span class="hljs-code">`req`</span>和<span class="hljs-code">`response`</span>需要进行强制类型转换<br><br><span class="hljs-section">## Listener</span><br><br><span class="hljs-bullet">+</span> 监听器是Servlet中的一员，是Servlet规范的一员<br><br><span class="hljs-bullet">+</span> 有哪些监听器<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```</span><br><span class="hljs-code">    jakarta.servlet</span><br></code></pre></td></tr></table></figure></p><p>  包下：</p><ul><li><p><code>ServletContextListener</code> 监听ServletContext的状态</p></li><li><p><code>ServletContextAttributeListener</code></p></li><li><p><code>ServletRequestListener</code></p></li><li><p><code>ServletRequestAttributeListener</code></p></li><li><pre><code class="hljs">jakarta.servlet.http<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>包下：<br><br>- `HttpSessionListener`<br><br>- ```<br>  HttpSessionAttributeListener<br></code></pre></td></tr></table></figure>  - 该监听器需要使用`@WebListener`注解进行标注  - 该监听器监听`session`域中数据的变化（添加、删除、替换）- ```  HttpSessionBindingListener  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 该监听器不需要使用`@WebListener`进行标注<br>  - 假设`User`类实现了该监听器，那么`User`对象在被放入`session`的时候触发`bind`事件，`User`对象从`session`中删除的时候，触发`unbind`事件<br>  - 假设`Customer`类没有实现该监听器，那么`Customer`对象放入`session`或者从`session`删除的时候，不会触发`bind`和`unbind`事件<br><br>- ```<br>  HttpSessionIdListener<br></code></pre></td></tr></table></figure>  - `session`的`id`发生改变的时候，监听器被调用- ```  HttpSessionActivationListener  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">      -</span> 监听<span class="hljs-code">`session`</span>对象的钝化和活化<br><span class="hljs-bullet">      -</span> 钝化：<span class="hljs-code">`session`</span>对象从内存存储到硬盘文件<br><span class="hljs-bullet">      -</span> 活化：从硬盘文件把<span class="hljs-code">`session`</span>恢复到内存<br><br><span class="hljs-bullet">+</span> <br><br>  + 编写一个类实现ServletContextListener接口，并实现方法<br><br></code></pre></td></tr></table></figure>void contextInitialized(ServletContextEvent event)void contextDestroyed(ServletContextEvent event)<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span> 在web.xml文件中对ServletContextListener进行配置<br><br></code></pre></td></tr></table></figure>MARKUP&lt;listener&gt;    &lt;listener-class&gt;top.zhengru.javaweb.listener.MyServletContextListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
